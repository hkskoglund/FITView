{"ts":1359726045537,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"ï»¿//use strict\n\n(function () {\n\n    var FITUI;\n\n    window.onload = function () {\n        FITUI = new UIController();\n        FITUI.setup();\n    }\n\n    function UIController() {\n\n        this.map = undefined;\n\n    }\n\n    UIController.prototype.showSpeedVsHeartRate = function (rawData) {\n        var seriesSpeedVsHR = [];\n        var minLength;\n\n        if (rawData[\"heart_rate\"] === undefined || rawData[\"heart_rate\"] === null)\n            return;\n\n        if (rawData[\"speed\"] === undefined || rawData[\"speed\"] === null)\n            return;\n\n        if (rawData[\"heart_rate\"].length === 0)\n            return;\n\n        if (rawData[\"speed\"].length === 0)\n            return;\n\n        var hrLength = rawData[\"heart_rate\"].length;\n        var speedLength = rawData[\"speed\"].length;\n\n        if (hrLength >= speedLength) // Arrays could be of different sizes, cut off\n            minLength = speedLength;\n        else\n            minLengt = hrLength;\n\n\n        var myZones = getHRZones();\n\n        for (var datap = 0; datap < minLength; datap++) {\n            var speedx = rawData[\"speed\"][datap][1];\n            var hry = rawData[\"heart_rate\"][datap][1];\n            if (speedx === undefined || hry === undefined)\n                console.error(\"Could not access raw data for data point nr. \" + datap.toString());\n            else {\n                seriesSpeedVsHR.push([speedx, hry]);\n\n                // Count Heart rate data points in zone\n                for (var zone = 0; zone < myZones.length; zone++) {\n                    if (hry <= myZones[zone].max && hry >= myZones[zone].min)\n                        if (myZones[zone].count === undefined)\n                            myZones[zone].count = 1\n                        else\n                            myZones[zone].count++;\n                }\n\n\n            }\n        }\n\n        var divChart = document.getElementById(\"speedVsHRChart\");\n        divChart.style.visibility = \"visible\";\n\n        var chart2 = new Highcharts.Chart({\n            chart: {\n                renderTo: 'speedVsHRChart',\n                type: 'line'\n            },\n            title: {\n                text: ''\n            },\n            xAxis: {\n\n                //categories : ['Apples', 'Bananas', 'Oranges']\n                //type : 'datetime'\n            },\n            yAxis: {\n                title: {\n                    text: 'bpm'\n                }\n            },\n\n            series: [{ name: 'Speed vs Heart Rate', data: seriesSpeedVsHR }]\n\n        });\n\n    }\n\n    function combine(values, timestamps,startTimestamp,endTimestamp) {\n        var util = FITUtility();\n        var combined = [];\n\n        if (timestamps == undefined) {\n            console.warn(\"Found no timestamps to combine with data measurements.\");\n            return values;\n        }\n\n        if (values.length !== timestamps.length)\n            console.warn(\"Length of arrays to combine is not of same size; values length = \" + values.length.toString() + \" timestamp length = \" + timestamps.length.toString());\n\n        \n        //if (verifyTimestamps(timestamps)) {\n        values.forEach(function (element, index, array) {\n            // combined.push([util.convertTimestampToLocalTime(timestamps[index]), element]);\n            var timestamp = timestamps[index];\n            if (timestamp >= startTimestamp && timestamp <= endTimestamp)\n              combined.push([util.addTimezoneOffsetToUTC(timestamps[index]), element]);\n           // combined.push([timestamps[index], element]);\n        });\n        return combined;\n        //} else\n        //    return values;\n    }\n\n    function verifyTimestamps(timestamps) {\n        var valid = true;\n        var len = timestamps.length;\n\n        for (var index = 0; index < len - 1; index++)\n            if (timestamps[index + 1] < timestamps[index]) {\n                valid = false;\n                break;\n            }\n\n        return valid;\n    }\n\n\n    UIController.prototype.showChartsDatetime = function (rawData,startTimestamp,endTimestamp) {\n\n        var util = FITUtility();\n       \n\n        var chartId = \"testChart\";\n        var divChart = document.getElementById(chartId);\n        divChart.style.visibility = \"visible\";\n        var seriesSetup = [];\n\n        var prevMarker = null; // Holds previous marker for tracking position during mouse move/over\n\n        // Record data\n\n        if (rawData.record !== undefined) {\n\n            if (rawData.record.heart_rate)\n                seriesSetup.push({ name: 'Heart rate', data: combine(rawData.record.heart_rate, rawData.record.timestamp,startTimestamp,endTimestamp), id: 'heartrateseries' })\n            //if (rawData.record[\"altitude\"] !== undefined)\n            //    seriesSetup.push({ name: 'Altitude', data: \n            //        combine(rawData.record[\"altitude\"], rawData.record[\"timestamp\"]),\n            //    });\n            //if (rawData.record[\"cadence\"] !== undefined)\n            //    seriesSetup.push({ name: 'Cadence', data: combine(rawData.record[\"cadence\"], rawData.record[\"timestamp\"]) });\n            //if (rawData.record[\"speed\"] !== undefined) {\n            //    rawData.record.speed.forEach(function (element, index, array) {\n            //        array[index][0] = element[0] * 3.6;\n            //    });\n            //    seriesSetup.push({ name: 'Speed', data: combine(rawData.record[\"speed\"], rawData.record[\"timestamp\"]) });\n            //}\n        }\n\n        //if (rawData.lap != undefined) {\n        //    // Lap data\n        //    if (rawData.lap[\"total_ascent\"] !== undefined)\n        //        seriesSetup.push({ name: 'Total Ascent pr Lap', data: rawData.lap[\"total_ascent\"] });\n        //    if (rawData.lap[\"total_descent\"] !== undefined)\n        //        seriesSetup.push({ name: 'Total Decent pr Lap', data: rawData.lap[\"total_descent\"] });\n        //    if (rawData.lap[\"avg_heart_rate\"] !== undefined)\n        //        seriesSetup.push({ name: 'Avg. HR pr Lap', data: rawData.lap[\"avg_heart_rate\"] });\n        //    if (rawData.lap[\"max_heart_rate\"] !== undefined)\n        //        seriesSetup.push({ name: 'Max. HR pr Lap', data: rawData.lap[\"max_heart_rate\"] });\n        //}\n\n\n\n        //// Test flags\n\n        //seriesSetup.push({\n        //    type: 'flags',\n        //    onSeries: 'heartrateseries',\n        //    data: [{\n        //        x: 0,\n        //        text: 'First heart rate',\n        //        title: 'I'\n        //    }],\n        //    width: 16,\n        //    showInLegend: false\n        //});\n\n        var xAxisType = 'datetime'\n\n        var chartOptions = {\n            renderTo: chartId,\n            type: 'line',\n            // Allow zooming\n            zoomType: 'xy'\n            \n    }\n        //if (rawData.hrv !== undefined)\n        //    chartOptions.inverted = true;\n\n        var d = new Date();\n        console.log(\"Starting highchart now \" + d);\n\n        chart1 = new Highcharts.Chart({\n            chart: chartOptions,\n            \n            title: {\n                text: ''\n            },\n            xAxis: {\n                //categories : ['Apples', 'Bananas', 'Oranges']\n                type: xAxisType\n                //reversed : true\n            },\n            yAxis: {\n                title: {\n                    text: ''\n                }\n            },\n\n            plotOptions: {\n                series: {\n                    allowPointSelect: true,\n                    point: {\n\n                        events: {\n\n                            select: function () {\n                                console.log(Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x), this.y)\n                            },\n\n                            mouseOver: function () {\n                                var lat, long;\n\n                                if (rawData.record != undefined) {\n                                    \n                                    var index = rawData.record.timestamp.indexOf(this.x-util.getTimezoneOffsetFromUTC());\n                                    if (index === -1) {\n                                        console.error(\"Could not find index of timestamp \", this.x);\n                                        return;\n                                    }\n\n                                    setMarker = function () {\n                                        prevMarker = new google.maps.Marker({\n                                            position: new google.maps.LatLng(util.semiCirclesToDegrees(lat), util.semiCirclesToDegrees(long)),\n                                            icon: {\n                                                path: google.maps.SymbolPath.CIRCLE,\n                                                scale: 3\n                                            },\n                                            draggable: true,\n                                            map: FITUI.map\n                                        });\n                                    }\n\n                                    if (rawData.record.position_lat != undefined)\n                                        lat = rawData.record.position_lat[index];\n\n                                    if (rawData.record.position_long != undefined)\n                                        long = rawData.record.position_long[index];\n\n                                    //console.log(\"Lat, long \", lat, long);\n\n                                    if (prevMarker === null) {\n                                        setMarker();\n                                    } else {\n                                        // Clear previous marker\n                                        prevMarker.setMap(null);\n                                        prevMarker = null;\n                                        setMarker();\n                                    }\n\n                                    \n                                }\n                            },\n\n                            mouseOut: function () {\n                                if (prevMarker !== undefined || prevMarker !== null) {\n                                    prevMarker.setMap(null);\n                                    prevMarker = null; // GC takes over...\n                                }\n                            }\n                        }\n\n                    }\n                }\n            },\n\n            series: seriesSetup\n\n\n\n        }\n\n\n            //, function () {\n            ////callback action\n            //alert('Something is happening now....');\n    //    }\n    );\n\n        d = new Date();\n        console.log(\"Finishing highcharts now \" + d);\n\n\n        //FITUI.showSpeedVsHeartRate(rawData);\n\n        //FITUI.showHRZones(rawData);\n\n\n    }\n\n    UIController.prototype.showChartHrv = function (rawData) {\n        var chartId = \"hrvChart\";\n        var divChart = document.getElementById(chartId);\n        //divChart.style.visibility = \"visible\";\n        var seriesSetup = [];\n\n        if (rawData.hrv !== undefined) {\n            if (rawData.hrv.time !== undefined) {\n\n                //chartType = 'bar';\n                // Seems like line rendering is much faster than bar...\n                //divChart.style.visibility = 'visible';\n                divChart.style.display = 'block';\n                seriesSetup.push({ name: 'Heart rate variability (RR-interval)', data: rawData.hrv.time })\n            }\n\n        }\n        else {\n            divChart.style.display = 'none';\n            return;\n        }\n\n        var xAxisType = ''\n\n        var chartOptions = {\n            renderTo: chartId,\n            type: 'line',\n            // Allow zooming\n            zoomType: 'xy'\n        }\n\n\n        chart1 = new Highcharts.Chart({\n            chart: chartOptions,\n            title: {\n                text: 'Heart rate variability'\n            },\n            xAxis: {\n                //categories : ['Apples', 'Bananas', 'Oranges']\n                type: xAxisType,\n                //reversed : true\n                events: {\n                    setExtremes: function (event) {\n                        console.log(\"setExtremes xAxis \", event.min, event.max);\n                    }\n                }\n            },\n            yAxis: {\n                title: {\n                    text: ''\n                },\n                events: {\n                    setExtremes: function (event) {\n                        console.log(\"setExtremes yAxis \", event.min, event.max);\n                    }\n                }\n            },\n\n            series: seriesSetup\n\n        });\n\n\n    }\n\n    UIController.prototype.showHRZones = function (rawData) {\n        var divChart = document.getElementById(\"zonesChart\");\n        divChart.style.visibility = \"visible\";\n\n        var options = {\n            chart: {\n                renderTo: 'zonesChart',\n                type: 'bar'\n            },\n            title: {\n                text: ''\n            },\n            xAxis: {\n\n                //categories: [myZones[0].name, myZones[1].name, myZones[2].name, myZones[3].name, myZones[4].name]\n                //type : 'datetime'\n            },\n            yAxis: {\n                title: {\n                    text: 'Minutes'\n                }\n            }\n\n            // Assuming 1 sec. sampling of data point -> divide by 60 to get number of minutes in zone\n            //series: []\n        };\n\n\n        var myZones = getHRZones();\n\n        for (var datap = 0; datap < rawData[\"heart_rate\"].length; datap++) {\n\n            var hry = rawData[\"heart_rate\"][datap][1];\n            if (hry == undefined || hry == null)\n                console.error(\"Could not access raw data for data point nr. \" + datap.toString());\n            else {\n                // Count Heart rate data points in zone\n                for (var zone = 0; zone < myZones.length; zone++) {\n                    if (hry <= myZones[zone].max && hry >= myZones[zone].min)\n                        if (myZones[zone].count == undefined)\n                            myZones[zone].count = 1\n                        else\n                            myZones[zone].count++;\n                }\n            }\n        }\n\n        var s1 = {};\n\n        s1.name = \"Heart rate zones\";\n        s1.data = [];\n        options.xAxis.categories = [];\n        options.series = [];\n\n        for (var catNr = 0; catNr < myZones.length; catNr++) {\n            options.xAxis.categories.push(myZones[catNr].name);\n            s1.data.push([myZones[catNr].name + \" (\" + myZones[catNr].min.toString() + \"-\" + myZones[catNr].max.toString() + \")\", myZones[catNr].count / 60]);\n        }\n\n        options.series.push(s1);\n\n        var chart3 = new Highcharts.Chart(options);\n    }\n\n    //UIController.prototype.showFileInfo = function () { outConsole.innerHTML = '<p>File size: ' + FITUI.fitFileManager.fitFile.size.toString() + ' bytes, last modified: ' + FITUI.fitFileManager.fitFile.lastModifiedDate.toLocaleDateString() + '</p>'; }\n\n\n\n    UIController.prototype.showSessionMarkers = function (map, rawdata) {\n        // Plot markers for start of each session\n        var self = this;\n\n        var util = FITUtility();\n\n        var sessionStartPosFound = false;\n\n        var session = rawdata.session;\n\n        setMapCenter = function (sport,lat,long) {\n            var latlong = new google.maps.LatLng(util.semiCirclesToDegrees(lat), util.semiCirclesToDegrees(long));\n            map.setCenter(latlong);\n            \n            if (self.sessionMarkers === undefined || self.sessionMarkers === null)\n                self.sessionMarkers = [];\n\n            var markerOptions = {\n                position: latlong,\n                map: map\n            };\n\n            // Select session marker according to sport mode\n            var image = undefined;\n\n            function newMarkerImage(imageName) {\n                return new google.maps.MarkerImage(imageName,\n                        new google.maps.Size(32, 32),\n                        new google.maps.Point(0, 0),\n                        new google.maps.Point(0, 32));\n            }\n\n            //generic 0\n            //running 1\n            //cycling 2\n            //transition 3 - Multisport transition\n            //fitness_equipment 4\n            //swimming 5\n            //basketball 6\n            //soccer 7\n            //tennis 8\n            //american_football 9\n            //training 10\n            //all 254 All is for goals only to include all sports.\n\n            \n            switch (sport) {\n                case FITSport.running:\n                    \n                    image = newMarkerImage('Images/sport/running.png');\n                    break;\n                case FITSport.cycling:\n                    image = newMarkerImage('Images/sport/cycling.png');\n                    break;\n\n                case FITSport.swimming:\n                    image = newMarkerImage('Images/sport/swimming.png');\n                    break;\n                    // TO DO : Add more icons\n            }\n\n            if (image !== undefined)\n                markerOptions.icon = image;\n           \n            self.sessionMarkers.push(new google.maps.Marker(markerOptions));\n        }\n        \n        // Clear previous session markers\n        if (self.sessionMarkers !== undefined && self.sessionMarkers !== null)\n        {\n            self.sessionMarkers.forEach(function (element, index, array) {\n                element.setMap(null);\n            });\n\n            self.sessionMarkers = null;\n        }\n\n        if (session !== undefined)\n       \n            if (session.start_position_lat !== undefined)\n            {\n        \n\n                session.start_position_lat.forEach(function (element, index, array) {\n\n                    var lat = element;\n                    var long = session.start_position_long[index];\n\n\n                    //var startTimeDate = new Date();\n                    //startTimeDate.setTime(util.convertTimestampToUTC(session.timestamp[index]));\n\n\n\n                    if (lat !== undefined && long !== undefined) {\n                        \n\n                        sessionStartPosFound = true;\n                        \n                        setMapCenter(session.sport[index],lat,long);\n\n                        \n                    }\n                });\n            }\n\n\n        // Valid .FIT file have session record, but invalid fit may not....try to fetch from record head instead\n\n        if (!sessionStartPosFound)\n            if (rawdata.record !== undefined) {\n                var lat = undefined;\n\n                if (rawdata.record.position_lat != undefined && rawdata.record.position_lat.length > 0)\n                    lat = rawdata.record.position_lat[0];\n\n                var long = undefined;\n\n                if (rawdata.record.position_long != undefined && rawdata.record.position_long.length > 0)\n                    long = rawdata.record.position_long[0];\n\n                var sport = rawdata.lap.sport[0];\n                if (sport === undefined)\n                    sport = 0; // Default to generic\n\n                if (lat !== undefined && long !== undefined)\n                    setMapCenter(sport,lat, long);\n            }\n\n\n    }\n\n    UIController.prototype.showSessionsAsOverlay = function (map, rawdata) {\n        var self = this;\n        var util = FITUtility();\n\n        var session = rawdata.session;\n\n        // Remove previous overlays\n        if (this.sessionRectangles !== undefined) {\n            this.sessionRectangles.forEach(function (element, index, array) {\n                self.sessionRectangles[index].setMap(null)\n            });\n        }\n\n        if (session === undefined)\n            return;\n\n        if (session.swc_lat === undefined || session.swc_long === undefined || session.nec_lat === undefined || session.nec_long === undefined) {\n            console.info(\"No swc/nec data available in session\");\n            return;\n        }\n\n        \n\n        \n\n        var sessionCoords = [];\n        self.sessionRectangles = [];\n        var fillColors = [];\n\n        \n\n        session.swc_lat.forEach(function (value, index, array) {\n\n            var sessionRectangle;\n\n            if (session.swc_lat[index] !== undefined ||\n                session.swc_long[index] !== undefined ||\n                session.nec_lat[index] !== undefined ||\n                session.nec_long[index] !== undefined) {\n                sessionCoords.push([\n            new google.maps.LatLng(util.semiCirclesToDegrees(session.swc_lat[index]), util.semiCirclesToDegrees(session.swc_long[index])),\n            new google.maps.LatLng(util.semiCirclesToDegrees(session.swc_lat[index]), util.semiCirclesToDegrees(session.nec_long[index])),\n            new google.maps.LatLng(util.semiCirclesToDegrees(session.nec_lat[index]), util.semiCirclesToDegrees(session.nec_long[index])),\n            new google.maps.LatLng(util.semiCirclesToDegrees(session.nec_lat[index]), util.semiCirclesToDegrees(session.swc_long[index]))]);\n            }\n\n            switch (session.sport[index]) {\n                case FITSport.running:\n                    fillColors.push(\"#339933\");\n                    break;\n                case FITSport.cycling:\n                    fillColors.push(\"#999\");\n                    break;\n                case FITSport.swimming:\n                    fillColors.push(\"#0066CC\");\n                    break;\n                default:\n                    fillColors.push(\"#339933\");\n                    break;\n            }\n\n            self.sessionRectangles.push( new google.maps.Polygon({\n                paths: sessionCoords[index],\n                strokeColor: \"#000000\",\n                strokeOpacity: 0.10,\n                strokeWeight: 1,\n                fillColor: fillColors[index],\n                fillOpacity: 0.10\n            }));\n\n            self.sessionRectangles[index].setMap(map);\n\n        }\n            );\n\n    }\n\n    UIController.prototype.initMap = function () {\n\n        var myCurrentPosition, newMap = undefined;\n\n        var mapOptions = {\n\n            zoom: 11,\n            mapTypeId: google.maps.MapTypeId.ROADMAP\n        };\n\n        newMap = new google.maps.Map(document.getElementById(\"activityMap\"), mapOptions);\n\n        var prevCenter = newMap.getCenter();\n\n        if (navigator.geolocation) {\n            // Async call with anonymous callback..\n            navigator.geolocation.getCurrentPosition(function (position) {\n                myCurrentPosition = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);\n                currentCenter = newMap.getCenter();\n\n                if (currentCenter === undefined)\n                    newMap.setCenter(myCurrentPosition);\n            });\n        }\n\n        return newMap;\n    }\n\n    UIController.prototype.showLaps = function (rawData) {\n\n\n        FITUI.divSessionLap.show();\n\n            \n    }\n\n\n    UIController.prototype.showPolyline = function (map, record, startTimestamp, endTimestamp) {\n      \n        var self = this;\n\n        // Clear previous polyline\n        if (self.activityPolyline) {\n\n            self.activityPolyline.setMap(null);\n            self.activityPolyline = null;\n        }\n\n        if (!record) {\n            console.info(\"No record msg. to based plot of polyline data for session,lap etc.\");\n            return;\n        }\n\n        if (!record.position_lat) {\n            console.info(\"No position data (position_lat), cannot render polyline data\");\n            return;\n        }\n\n          \n\n        \n        var activityCoordinates = [];\n        var util = FITUtility();\n\n        // Build up polyline\n        \n            var latLength = record.position_lat.length;\n            console.info(\"Total GPS points available (on property position_lat) : \", latLength);\n\n        \n            //var sampleInterval = Math.floor(latLength / 30);\n\n            //if (sampleInterval < 1)\n            //    sampleInterval = 1;\n\n            var sampleInterval = 2; // Max. sampling rate for 910XT is 1 second \n\n            console.info(\"Sample length for polyline is \", sampleInterval);\n\n            //var sample = 0;\n\n            var sampleLimit = 100;\n\n            var findNearestTimestamp = function(timestamp) {\n                var indxNr;\n                for (indxNr = 0; indxNr < latLength; indxNr++) {\n                    if (record.timestamp[indxNr] >= timestamp)\n                        break;\n                }\n                return indxNr;\n            }\n\n            var indexStartTime = record.timestamp.indexOf(startTimestamp);\n            if (indexStartTime === -1) {\n                console.warn(\"Starttime not found for timestamp \", startTimestamp, \" looping through available timestamps to find nearest\");\n                indexStartTime = findNearestTimestamp(startTimestamp);\n            }\n\n            var indexEndTime = record.timestamp.indexOf(endTimestamp);\n            if (indexEndTime === -1) {\n                console.warn(\"Endtime not found for timestamp \",endTimestamp,\" looping through available timestamps to find nearest\");\n                indexEndTime = findNearestTimestamp(endTimestamp);\n            }\n\n            for (var index = indexStartTime; index <= indexEndTime; index++) {\n                if (index === indexStartTime || (index % sampleInterval === 0) || index === indexEndTime)\n                    if (record.position_long[index] !== undefined)\n                        activityCoordinates.push(new google.maps.LatLng(util.semiCirclesToDegrees(record.position_lat[index]), util.semiCirclesToDegrees(record.position_long[index])));\n            }\n\n            console.info(\"Total length of polyline array with coordinates is : \", activityCoordinates.length.toString());\n\n           // var testarr = activityCoordinates.slice(0, sampleLimit);\n\n        self.activityPolyline = new google.maps.Polyline({\n            path: activityCoordinates,\n            strokeColor: \"#FF0000\",\n            strokeOpacity: 1.0,\n            strokeWeight: 2\n        });\n\n        self.activityPolyline.setMap(map);\n\n    }\n\n\n    UIController.prototype.onFITManagerMsg = function (e) {\n\n        var eventdata = e.data;\n\n        intepretCounters = function (counter) {\n            if (counter.fileIdCounter != 1)\n                console.error(\"File id msg. should be 1, but is \", counter.fileIdCounter);\n            if (counter.fileIdCounter != 1)\n                console.error(\"File creator msg. should be 1, but is \", counter.fileCreatorCounter);\n            if (counter.sessionCounter === 0)\n                console.error(\"Session msg. should be at least 1, but is \",counter.sessionCounter);\n            if (counter.lapCounter === 0)\n                console.error(\"Lap msg. should be at least 1, but is \",counter.lapCounter);\n            if (counter.activityCounter !== 1)\n                console.error(\"Activity msg. should be 1, but is \", counter.activityCounter);\n            if (counter.deviceInfoCounter === 0)\n                console.error(\"Expected more than 0 device_info msg. \", counter.deviceInfoCounter);\n            if (counter.recordCounter === 0)\n                console.error(\"No record msg. \", counter.lapCounter);\n\n        }\n\n        resetViewModel = function (viewModel) {\n            // Set arrays to []\n            for (var observableArray in viewModel) {\n\n                if (observableArray !== \"timestamp\" && observableArray !== \"__ko_mapping__\" && viewModel[observableArray] !== undefined && viewModel[observableArray].removeAll) {\n                   // console.log(\"RemoveAll() on \", observableArray);\n                    viewModel[observableArray].removeAll();\n                }\n            }\n\n            // Take timestamp in the end, due to a foreach: timestamp in databinding, better be carefull about bindings....\n            if (viewModel.timestamp !== undefined)\n                viewModel.timestamp.removeAll();\n\n        }\n\n\n        switch (eventdata.response) {\n\n            case 'rawData':\n                //var rawData = JSON.parse(data.rawdata);\n                $(\"#progressFITimport\").hide();\n                FITUI.progressFITimportViewModel.progressFITimport(0);\n\n                var rawData = eventdata.rawdata;\n\n                intepretCounters(rawData.counter);\n\n                // Value converters that are run on \"create\"-event/callback in knockout\n                var mappingOptions = {\n                    'total_elapsed_time': {\n                        create: function (options) {\n                            return new mySecsToHHMMSSModel(options.data);\n                        }\n                    },\n                    'total_timer_time': {\n                        create: function (options) {\n                            return new mySecsToHHMMSSModel(options.data);\n                        }\n                    },\n                    'avg_speed': {\n                        create: function (options) {\n                            return new mySpeedConverterModel(options.data);\n                        }\n                    },\n                    'max_speed': {\n                        create: function (options) {\n                            return new mySpeedConverterModel(options.data);\n                        }\n                    }\n                };\n                \n                \n                var mySpeedConverterModel = function (speedMprSEC) {\n                    //ko.mapping.fromJS(speedMprSEC, {}, this);\n                    var self = this;\n                    self.value = speedMprSEC;\n                    \n                    self.toMINprKM = ko.computed(function () {\n                        var minPrKM = 1 / (speedMprSEC * 60 / 1000); // min/km\n                        var minutes = Math.floor(minPrKM);\n                        var seconds = ((minPrKM - minutes) * 60).toFixed(); // implicit rounding\n\n                        var result = (minutes < 10 ? \"0\" + minutes : minutes) + \":\" + (seconds < 10 ? \"0\" + seconds : seconds);\n                        return result;\n                    }, self);\n\n                    self.toKMprH = ko.computed(function () {\n                        var kmPrH = (speedMprSEC * 3.6).toFixed(1);\n                        return kmPrH;\n                    }, self);\n                };\n\n                var mySecsToHHMMSSModel = function (totalSec) {\n                    //ko.mapping.fromJS(totalSec, {}, this); //Maybe not needed on scalar object\n\n                    this.value = totalSec;\n                    this.toHHMMSS = ko.computed(function () {\n                        // http://stackoverflow.com/questions/1322732/convert-seconds-to-hh-mm-ss-with-javascript\n\n                        var hours = parseInt(totalSec / 3600) % 24;\n                        var minutes = parseInt(totalSec / 60) % 60;\n                        var seconds = parseInt(totalSec % 60, 10);\n\n                        var hourResult;\n                        if (hours != 0)\n                            hourResult = (hours < 10 ? \"0\" + hours : hours) + \":\";\n                        else\n                            hourResult = \"\";\n\n                        var result = hourResult + (minutes < 10 ? \"0\" + minutes : minutes) + \":\" + (seconds < 10 ? \"0\" + seconds : seconds);\n                        return result;\n                    }, this);\n                };\n\n                //var rawdataSession1 = {\n                //    avg_heart_rate: [121],\n                //    max_heart_rate: [170],\n                //    timestamp: [1, 2, 3, 4]\n                //    };\n\n                //var rawdataSession2 = {\n                //    avg_heart_rate: [131],\n                //    timestamp: [1, 2]\n                //};\n\n                \n\n                //sessionModel1 = ko.mapping.fromJS(rawdataSession1);\n\n\n                //for (var prop in sessionModel1) {\n                //    console.log(\"Trying to remove property : \", prop);\n                //    if (sessionModel1[prop].removeAll)\n                //        sessionModel1[prop].removeAll();\n                //}\n                ////if (sessionModel1.max_heart_rate)\n                ////   sessionModel1.max_heart_rate.removeAll();\n\n                //if (sessionModel1.max_heart_rate)\n                //    sessionModel1.max_heart_rate([]); // I would like delete sessionModel1.max_heart_rate....,but that would probably mess up knockoutjs bindings, is there a function to delete??\n                \n                //ko.mapping.fromJS(rawdataSession2,sessionModel1);\n\n                var jquerySessionElement = $('#divSessions');\n                var sessionElement = jquerySessionElement[0];\n               \n                //if (rawData.session !== undefined) {\n                if (FITUI.sessionViewModel === undefined) {\n\n\n                    // http://stackoverflow.com/questions/10048485/how-to-clear-remove-observable-bindings-in-knockout-js\n\n                    if (rawData.session !== undefined) {   // Skip mapping and apply bindings only on available data\n\n                        FITUI.sessionViewModel = ko.mapping.fromJS(rawData.session, mappingOptions);\n\n                        FITUI.sessionViewModel.tempoOrSpeed = ko.observable(undefined);\n\n                       // jquerySessionElement.show();\n                        ko.applyBindings(FITUI.sessionViewModel, sessionElement); // Initialize model with DOM \n                        \n                    }\n                }\n                else {\n\n                    // Discussion: https://groups.google.com/forum/?fromgroups=#!topic/knockoutjs/LWsxAJ3m97s\n\n                    resetViewModel(FITUI.sessionViewModel);\n\n                    ko.mapping.fromJS(rawData.session, mappingOptions, FITUI.sessionViewModel); // Just update model with new data\n                }\n\n                   \n                var jqueryLapNode = $('#divLaps');\n                var lapNode = jqueryLapNode[0];\n\n                if (FITUI.lapViewModel === undefined) {\n                    if (rawData.lap !== undefined) {\n                        FITUI.lapViewModel = ko.mapping.fromJS(rawData.lap, mappingOptions);\n                       // jqueryLapNode.show();\n                        ko.applyBindings(FITUI.lapViewModel, lapNode);\n                       \n                    }\n                }\n                else {\n                    resetViewModel(FITUI.lapViewModel);\n                    ko.mapping.fromJS(rawData.lap, mappingOptions, FITUI.lapViewModel);\n                }\n\n                // Initialize map\n                if (FITUI.map === undefined)\n                    FITUI.map = FITUI.initMap();\n\n\n                switch (rawData.file_id.type[0]) {\n                    case 4: // Activity file\n\n                            FITUI.showLaps(rawData);\n\n                        //if (rawData.session != undefined)\n                            FITUI.showSessionMarkers(FITUI.map, rawData);\n\n                            if (rawData.record === undefined) {\n                                console.info(\"No record msg. available to extract data from\");\n                            } else {\n\n                                FITUI.showSessionsAsOverlay(FITUI.map, rawData);\n\n                                FITUI.showPolyline(FITUI.map, rawData.record, rawData.session.start_time[0],rawData.session.timestamp[0]);\n\n                                FITUI.showChartsDatetime(rawData, rawData.session.start_time[0], rawData.session.timestamp[0]);\n                            }\n\n                        //FITUI.showChartHrv(rawData);\n\n                        FITUI.showDataRecordsOnMap(eventdata.datamessages);\n                        break;\n                    default:\n                        console.warn(\"Unsupported fit file type, expected 4 (activity file), but got \", rawData.file_id.type[0]);\n                        break;\n\n                }\n\n              \n\n                break;\n\n            case 'header':\n                var headerInfo = eventdata.header;\n                if (headerInfo.estimatedFitFileSize != headerInfo.fitFile.size)\n                    console.warn(\"Header reports FIT file size \" + headerInfo.estimatedFitFileSize.toString() + \" bytes, but file system reports: \" + headerInfo.fitFile.size.toString() + \" bytes.\");\n                break;\n\n            case 'error':\n                var errMsg = eventdata.data;\n\n                if (eventdata.event != undefined) {\n                    errMsg += \" Event; \";\n                    for (var prop in eventdata.event) {\n                        if (typeof prop === \"string\")\n                            errMsg += \"property \" + prop + \" : \" + eventdata.event.prop;\n                    }\n                }\n                console.error(errMsg);\n                break;\n\n            case 'info':\n                console.info(eventdata.data);\n                break;\n\n            case 'progress':\n               \n                FITUI.progressFITimportViewModel.progressFITimport(eventdata.data);\n\n                //FITUI.progressFITImport.setAttribute(\"value\", eventdata.data);\n                break;\n\n            default:\n                console.error(\"Received unrecognized message from worker \" + eventdata.response);\n                break;\n        }\n\n\n\n    }\n\n    UIController.prototype.onFITManagerError = function (e) {\n        console.error(\"Error in worker, status \" + e.toString());\n    }\n\n    function progressFITimportViewModel() {\n        var self = this;\n\n        self.progressFITimport = ko.observable(0);\n    }\n\n    function lapViewModel(lap) {\n        var self = this;\n\n        self.lap = lap;\n\n        // Non-editable catalog data - would come from the server\n        //self.availableMeals = [\n        //    { mealName: \"Standard (sandwich)\", price: 0 },\n        //    { mealName: \"Premium (lobster)\", price: 34.95 },\n        //    { mealName: \"Ultimate (whole zebra)\", price: 290 }\n        //];\n\n\n\n        self.hasLap = ko.computed(function () {\n            if (self.lap !== undefined)\n                return true;\n            else\n                return false;\n        });\n\n    }\n\n    function sessionViewModel(session) {\n        var self = this;\n\n        self.session = session;\n\n        // Non-editable catalog data - would come from the server\n        //self.availableMeals = [\n        //    { mealName: \"Standard (sandwich)\", price: 0 },\n        //    { mealName: \"Premium (lobster)\", price: 34.95 },\n        //    { mealName: \"Ultimate (whole zebra)\", price: 290 }\n        //];\n\n       \n        self.hasSession = ko.computed(function () {\n            if (self.session !== undefined)\n                return true;\n            else\n                return false;\n        });\n\n\n\n        //self.resetLapSession = function () {\n\n        //    self.session = ko.observable(undefined);\n\n        //    self.lap = ko.observable(undefined);\n\n        //}\n\n        //self.resetLapSession();\n\n        ////self.rawDataAvailable = ko.observable(false);\n\n        //self.sessionAvailable = ko.computed(function () {\n        //    if (self.session === undefined)\n        //        return false;\n        //    else\n        //        return true;\n        //});\n\n        //self.lapAvailable = ko.computed(function () {\n        //    if (self.lap === undefined)\n        //        return false;\n        //    else\n        //        return true;\n        //});\n        //self.lapTime = ko.computed(function () {\n        //    var minRaw = self.lap.total_timer_time[0] / 60;\n        //    var minPart = Math.floor(minRaw);\n        //    var secPart = (minRaw - minPart) * 60;\n\n        //    //return {\n        //    //    minutes: minPart,\n        //    //    seconds: secPart,\n        //    //    toString: minPart.toString() + \":\" + secPart.toFixed(2)\n        //    //};\n\n        //    return minPart.toString() + \":\" + secPart.toFixed(2);\n\n        //});\n\n\n        // self.timestamp = rawData.lap.timestamp[0].value;\n\n        // Editable data\n        //self.seats = ko.observableArray([\n        //    new SeatReservation(\"Steve\", self.availableMeals[0]),\n        //    new SeatReservation(\"Bert\", self.availableMeals[0])\n        //]);\n\n        // Operations\n        //self.addSeat = function () {\n        //    self.seats.push(new SeatReservation(\"\", self.availableMeals[0]));\n        //}\n\n        //self.removeSeat = function (seat) { self.seats.remove(seat) }\n\n        //self.totalSurcharge = ko.computed(function () {\n        //    var total = 0;\n        //    for (var i = 0; i < self.seats().length; i++)\n        //        total += self.seats()[i].meal().price;\n        //    return total;\n        //});\n\n\n\n    }\n\n    UIController.prototype.setup = function () {\n        // Setup DOM event handling\n\n        // this = #document by default since we are called from $(document).ready event handler\n\n        if (!Modernizr.webworkers) {\n            alert(\"This application will not work due to lack of webworker functionality\");\n        }\n\n        \n        if (!Modernizr.indexeddb) {\n            alert(\"This application will not work due to lack of indexedDB\");\n        }\n\n        if (!Modernizr.geolocation) {\n            alert(\"This application will not work due to lack of geolocation\");\n        }\n\n        // Capturing = false -> bubbling event\n        FITUI.inpFITFile = document.getElementById('inpFITFile');\n        FITUI.inpFITFile.addEventListener('change', FITUI.onFitFileSelected, false);\n\n\n        //FITUI.btnParse = document.getElementById('btnParse')\n        //FITUI.btnParse.addEventListener('click', FITUI.onbtnParseClick, false);\n\n\n        //FITUI.btnSaveZones = document.getElementById('btnSaveZones')\n        //FITUI.btnSaveZones.addEventListener('click', saveHRZones, false);\n\n        FITUI.divMsgMap = document.getElementById('divMsgMap');\n\n        FITUI.progressFITImport = document.getElementById('progressFITImport');\n\n        FITUI.divSessionLap = $('#divSessionLap');\n        \n       \n         \n       \n\n        \n\n        \n        //ko.applyBindings(FITUI.viewmodel);\n        \n\n\n    }\n\n    UIController.prototype.showDataRecordsOnMap = function (dataRecords) {\n\n        var FIT_MSG_FILEID = 0;\n        var FIT_MSG_SESSION = 18;\n        var FIT_MSG_LAP = 19;\n        var FIT_MSG_RECORD = 20;\n        var FIT_MSG_EVENT = 21;\n        var FIT_MSG_ACTIVITY = 34;\n        var FIT_MSG_FILE_CREATOR = 49;\n        var FIT_MSG_HRV = 78;\n        var FIT_MSG_DEVICE_INFO = 23;\n        var FIT_MSG_LENGTH = 101;\n\n        // Clear div\n        while (divMsgMap.firstChild) {\n            divMsgMap.removeChild(divMsgMap.firstChild);\n        }\n\n        dataRecords.forEach(function (element, index, array) { // forEach takes a callback\n\n            var styleClass = \"\";\n            switch (element) {\n                case FIT_MSG_FILEID: styleClass = 'FITfile_id'; break;\n                case FIT_MSG_SESSION: styleClass = 'FITsession'; break;\n                case FIT_MSG_LAP: styleClass = 'FITlap'; break;\n                case FIT_MSG_RECORD: styleClass = 'FITrecord'; break;\n                case FIT_MSG_DEVICE_INFO: styleClass = 'FITdevice_info'; break;\n                case FIT_MSG_ACTIVITY: styleClass = 'FITactivity'; break;\n                case FIT_MSG_HRV: styleClass = 'FIThrv'; break;\n                case FIT_MSG_EVENT: styleClass = 'FITevent'; break;\n                case FIT_MSG_FILE_CREATOR: styleClass = 'FITfile_creator'; break;\n                case FIT_MSG_LENGTH: styleClass = 'FITlength'; break;\n                default: styleClass = 'FITunknown'; break;\n            }\n\n            divMsgMap.insertAdjacentHTML(\"beforeend\", '<div class=' + styleClass + '></div>');\n        })\n    }\n\n    //UIController.prototype.showFITHeader = function () {\n    //    var headerHtml = '<p>Header size : ' + FITUI.fitFileManager.headerSize.toString() + ' bytes ' +\n    //'Protocol version : ' + FITUI.fitFileManager.protocolVersion.toString() +\n    //' Profile version : ' + FITUI.fitFileManager.profileVersion.toString() +\n    //' Data size: ' + FITUI.fitFileManager.dataSize.toString() + ' bytes' +\n    //' Data type: ' + FITUI.fitFileManager.dataType;\n    //    if (FITUI.fitFileManager.headerCRC != undefined) {\n    //        headerHtml += ' CRC: ' + parseInt(FITUI.fitFileManager.headerCRC, 10).toString(16);\n    //    }\n\n    //    return headerHtml;\n    //}\n\n    function deleteDb() {\n        // https://developer.mozilla.org/en-US/docs/IndexedDB/IDBFactory#deleteDatabase\n        // Problem : can only delete indexeddb one time in the same tab\n        //self.postMessage({ response: \"info\", data: \"deleteDb()\" });\n\n        var req;\n\n        try {\n            req = indexedDB.deleteDatabase(\"fit-import\");\n        } catch (e) {\n            console.error(e.message);\n        }\n        //req.onblocked = function (evt) {\n        //    self.postMessage({ respone: \"error\", data: \"Database is blocked - error code\" + (evt.target.error ? evt.target.error : evt.target.errorCode) });\n        //}\n\n\n        req.onsuccess = function (evt) {\n            console.info(\"Delete \"+evt.currentTarget.readyState);\n            \n        };\n\n        req.onerror = function (evt) {\n            console.error(\"Error deleting database\");\n        };\n\n    }\n\n    UIController.prototype.onFitFileSelected = function (e) {\n        // console.log(e);\n        e.preventDefault();\n\n        \n\n        FITUI.selectedFiles = e.target.files;\n\n        var files = FITUI.selectedFiles;\n\n        // Setup mutiple/batch workers\n        console.log(\"Setup of \" + files.length + \" workers.\");\n        for (var fileNr = 0; fileNr < files.length; fileNr++) {\n            //FITUI[\"fitFileManager\" + fileNr.toString()] = new Worker(\"Scripts/fitFileManager.js\")\n            //FITUI[\"fitFileManager\" + fileNr.toString()].addEventListener('message', FITUI.onFITManagerMsg, false);\n            //FITUI[\"fitFileManager\" + fileNr.toString()].addEventListener('error', FITUI.onFITManagerError, false);\n\n        };\n\n        // Make sure we terminate previous worker\n        if (FITUI[\"fitFileManager\"] !== undefined) {\n            FITUI[\"fitFileManager\"].removeEventListener('error', FITUI.onFITManagerError, false);\n            FITUI[\"fitFileManager\"].removeEventListener('message', FITUI.onFITManagerMsg, false);\n            FITUI[\"fitFileManager\"].terminate();\n        }\n\n        FITUI[\"fitFileManager\"] = new Worker(\"Scripts/FITImport.js\")\n        FITUI[\"fitFileManager\"].addEventListener('message', FITUI.onFITManagerMsg, false);\n        FITUI[\"fitFileManager\"].addEventListener('error', FITUI.onFITManagerError, false);\n\n\n        // Need to adjust timestamps in the underlying data from Garmin time/System time\n\n        // Start our worker now\n        //var msg = { request: 'loadFitFile', \"fitfile\": files[0], \"timeCalibration\" : timeCalibration, \"globalmessage\" : \"record\", \"fields\" : \"heart_rate altitude cadence speed\", skipTimestamps : false };\n\n        //var query = [];\n\n        //query.push(\n\n        //   // { message: \"hrv\", fields: \"time\" },\n        //   { message: \"file_id\", fields: \"type manufacturer product serial_number time_created number\" },\n        //   { message: \"file_creator\", fields: \"software_version hardware_version\" },\n        //   { message: \"record\", fields: \"timestamp position_lat position_long heart_rate altitude speed\" },\n        //   { message: \"session\", fields: \"timestamp start_time start_position_lat start_position_long total_training_effect num_laps\" },\n        //   { message: \"activity\", fields: \"timestamp total_timer_time num_sessions type event event_type local_timestamp event_group\" },\n        //  { message: \"hrv\", fields: \"time\" }\n        //   );\n\n       // deleteDb();\n\n        var msg = {\n            request: 'importFitFile', \"fitfile\": files[0]\n            //, \"query\": query\n        };\n\n        \n        if (FITUI.progressFITimportViewModel !== undefined)\n            FITUI.progressFITimportViewModel = null;\n\n        FITUI.progressFITimportViewModel = new progressFITimportViewModel();\n        ko.applyBindings(FITUI.progressFITimportViewModel, document.getElementById(\"progressFITimport\"));\n        $(\"#progressFITimport\").show();\n\n        FITUI[\"fitFileManager\"].postMessage(msg);\n\n\n\n    }\n\n\n    function saveHRZones(e) {\n\n    }\n\n\n\n\n\n\n    function getHRZones() {\n        // Assume browser supports localStorage\n        var localStorage = window.localStorage;\n        var key = \"FITView.HRZones\";\n        var myZonesJSONString = localStorage.getItem(key);\n\n        var myZones;\n        if (myZonesJSONString != null)\n            myZones = JSON.parse(myZonesJSONString);\n        else {\n            console.info(\"Local storage of \" + key + \" not found, using default HR Zones\");\n            myZones = [{ name: 'Zone 1', min: 110, max: 120 },   // No storage found use default\n                     { name: 'Zone 2', min: 121, max: 140 },\n                     { name: 'Zone 3', min: 141, max: 150 },\n                     { name: 'Zone 4', min: 151, max: 165 },\n                     { name: 'Zone 5', min: 166, max: 256 }];\n        }\n\n        return myZones;\n    }\n\n})\n\n// We have created a socalled Immediately-Invoked Function Expression (IIFE)\n\n(); // Run it\n\n\n\n\n\n\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":48830}]],"length":48830}
{"contributors":[],"silentsave":false,"ts":1359726211490,"patch":[[{"diffs":[[-1,"ï»¿"],[0,"//us"]],"start1":0,"start2":0,"length1":5,"length2":4},{"diffs":[[0,"I.setup();\n    }"],[1,";"],[0,"\n\n    function U"]],"start1":128,"start2":128,"length1":32,"length2":33},{"diffs":[[0,"minLengt"],[1,"h"],[0," = hrLen"]],"start1":927,"start2":927,"length1":16,"length2":17},{"diffs":[[0,"ries' })"],[1,";"],[0,"\n       "]],"start1":4601,"start2":4601,"length1":16,"length2":17},{"diffs":[[0,"atetime'"],[1,";"],[0,"\n\n      "]],"start1":6509,"start2":6509,"length1":16,"length2":17},{"diffs":[[0,"      \n    }"],[1,";"],[0,"\n        //i"]],"start1":6668,"start2":6668,"length1":24,"length2":25}]],"length":48834,"saved":false}
{"ts":1359727240843,"patch":[[{"diffs":[[0,"   map: "],[-1,"FITUI"],[1,"this"],[0,".map\n   "]],"start1":8816,"start2":8816,"length1":21,"length2":20},{"diffs":[[0,"awData);\n\n\n    }"],[-1,""],[0,""],[1,";"],[0,"\n\n    UIControll"]],"start1":10634,"start2":10634,"length1":32,"length2":33},{"diffs":[[0,".time })"],[-1,""],[0,""],[1,";"],[0,"\n       "]],"start1":11293,"start2":11293,"length1":16,"length2":17},{"diffs":[[0,"ype = ''"],[-1,""],[0,""],[1,";"],[0,"\n\n      "]],"start1":11437,"start2":11437,"length1":16,"length2":17},{"diffs":[[0,": 'xy'\n        }"],[1,";"],[0,"\n\n\n        chart"]],"start1":11583,"start2":11583,"length1":32,"length2":33},{"diffs":[[0,"   };\n\n\n        "],[1,"var "],[0,"chart1 = new Hig"]],"start1":11595,"start2":11595,"length1":32,"length2":36},{"diffs":[[0,"     });\n\n\n    }"],[-1,""],[0,""],[1,";"],[0,"\n\n    UIControll"]],"start1":12474,"start2":12474,"length1":32,"length2":33},{"diffs":[[0,"ons));\n        }"],[-1,""],[0,""],[1,";"],[0,"\n        \n      "]],"start1":17063,"start2":17063,"length1":32,"length2":33},{"diffs":[[0," var lat"],[-1," = undefined"],[0,""],[1,""],[0,";\n\n     "]],"start1":18414,"start2":18414,"length1":28,"length2":16},{"diffs":[[0,"var long"],[-1," = undefined"],[0,";\n\n     "]],"start1":18604,"start2":18604,"length1":28,"length2":16},{"diffs":[[0,"position_long !="],[1,"="],[0," undefined && ra"]],"start1":18650,"start2":18650,"length1":32,"length2":33},{"diffs":[[0,"       }\n\n\n    }"],[-1,""],[0,""],[1,";"],[0,"\n\n    UIControll"]],"start1":19045,"start2":19045,"length1":32,"length2":33},{"diffs":[[0,"setMap(null)"],[-1,""],[0,""],[1,";"],[0,"\n           "]],"start1":19452,"start2":19452,"length1":24,"length2":25},{"diffs":[[0,"    "],[-1,"  var sessionRectangle;\n"],[0,""],[1,""],[0,"\n   "]],"start1":19993,"start2":19993,"length1":32,"length2":8},{"diffs":[[0,"       );\n\n    }"],[-1,""],[0,""],[1,";"],[0,"\n\n    UIControll"]],"start1":21724,"start2":21724,"length1":32,"length2":33},{"diffs":[[0,"    "],[-1," var prevCenter = newMap.getCenter();"],[0,""],[1,""],[0,"\n\n  "]],"start1":22056,"start2":22056,"length1":45,"length2":8},{"diffs":[[0,"        "],[-1,""],[0,""],[1,"var"],[0,"  curren"]],"start1":22345,"start2":22345,"length1":16,"length2":19},{"diffs":[[0,"ewMap;\n    }"],[-1,""],[0,""],[1,";"],[0,"\n\n    UICont"]],"start1":22544,"start2":22544,"length1":24,"length2":25},{"diffs":[[0,"ata) {\n\n\n   "],[-1,"     FITUI"],[1,"this"],[0,".divSessionL"]],"start1":22611,"start2":22611,"length1":34,"length2":28},{"diffs":[[0,"      \n    }"],[-1,""],[0,""],[1,";"],[0,"\n\n\n    UICon"]],"start1":22657,"start2":22657,"length1":24,"length2":25},{"diffs":[[0,"0;\n\n            "],[-1,""],[0,""],[1,"//"],[0,"var sampleLimit "]],"start1":23905,"start2":23905,"length1":32,"length2":34},{"diffs":[[0,"r;\n            }"],[-1,""],[0,""],[1,";"],[0,"\n\n            va"]],"start1":24241,"start2":24241,"length1":32,"length2":33},{"diffs":[[0,"map);\n\n    }"],[-1,""],[0,""],[1,";"],[0,"\n\n\n    UICon"]],"start1":25821,"start2":25821,"length1":24,"length2":25},{"diffs":[[0,".data;\n\n        "],[-1,""],[0,""],[1,"var "],[0,"intepretCounters"]],"start1":25923,"start2":25923,"length1":32,"length2":36},{"diffs":[[0,"ter);\n\n        }"],[1,";"],[0,"\n\n        resetV"]],"start1":26942,"start2":26942,"length1":32,"length2":33},{"diffs":[[0,"    };\n\n        "],[1,"var "],[0,"resetViewModel ="]],"start1":26953,"start2":26953,"length1":32,"length2":36},{"diffs":[[0,"ll();\n\n        }"],[-1,""],[0,""],[1,";"],[0,"\n\n\n        switc"]],"start1":27660,"start2":27660,"length1":32,"length2":33},{"diffs":[[0,"                "],[-1,"FITUI"],[1,"this"],[0,".progressFITimpo"]],"start1":27853,"start2":27853,"length1":37,"length2":36},{"diffs":[[0,"c / 3600"],[1,",10"],[0,") % 24;\n"]],"start1":30454,"start2":30454,"length1":16,"length2":19},{"diffs":[[0,"Sec / 60"],[1,",10"],[0,") % 60;\n"]],"start1":30525,"start2":30525,"length1":16,"length2":19},{"diffs":[[0,"    if ("],[-1,"FITUI"],[1,"this"],[0,".session"]],"start1":32446,"start2":32446,"length1":21,"length2":20},{"diffs":[[0,"                "],[-1,"FITUI"],[1,"this"],[0,".sessionViewMode"]],"start1":32744,"start2":32744,"length1":37,"length2":36},{"diffs":[[0,"        "],[-1,"FITUI"],[1,"this"],[0,".session"]],"start1":32853,"start2":32853,"length1":21,"length2":20},{"diffs":[[0,"indings("],[-1,"FITUI"],[1,"this"],[0,".session"]],"start1":33013,"start2":33013,"length1":21,"length2":20},{"diffs":[[0,"ewModel("],[-1,"FITUI"],[1,"this"],[0,".session"]],"start1":33318,"start2":33318,"length1":21,"length2":20},{"diffs":[[0,"ptions, "],[-1,"FITUI"],[1,"this"],[0,".session"]],"start1":33414,"start2":33414,"length1":21,"length2":20},{"diffs":[[0,"    if ("],[-1,"FITUI"],[1,"this"],[0,".lapView"]],"start1":33632,"start2":33632,"length1":21,"length2":20},{"diffs":[[0,"        "],[-1,"FITUI"],[1,"this"],[0,".lapView"]],"start1":33744,"start2":33744,"length1":21,"length2":20},{"diffs":[[0,"indings("],[-1,"FITUI"],[1,"this"],[0,".lapView"]],"start1":33901,"start2":33901,"length1":21,"length2":20},{"diffs":[[0,"ewModel("],[-1,"FITUI"],[1,"this"],[0,".lapView"]],"start1":34052,"start2":34052,"length1":21,"length2":20},{"diffs":[[0,"ptions, "],[-1,"FITUI"],[1,"this"],[0,".lapView"]],"start1":34139,"start2":34139,"length1":21,"length2":20},{"diffs":[[0,"    if ("],[-1,"FITUI"],[1,"this"],[0,".map ==="]],"start1":34232,"start2":34232,"length1":21,"length2":20},{"diffs":[[0,"    "],[-1,"FITUI"],[1,"this"],[0,".map = "],[-1,"FITUI"],[1,"this"],[0,".ini"]],"start1":34280,"start2":34280,"length1":25,"length2":23},{"diffs":[[0,"            "],[-1,"FITUI"],[1,"this"],[0,".showLaps(ra"]],"start1":34426,"start2":34426,"length1":29,"length2":28},{"diffs":[[0,"                "],[-1,"FITUI"],[1,"this"],[0,".showSessionMark"]],"start1":34535,"start2":34535,"length1":37,"length2":36},{"diffs":[[0,"Markers("],[-1,"FITUI"],[1,"this"],[0,".map, ra"]],"start1":34567,"start2":34567,"length1":21,"length2":20},{"diffs":[[0,"            "],[-1,"FITUI"],[1,"this"],[0,".showSession"]],"start1":34813,"start2":34813,"length1":29,"length2":28},{"diffs":[[0,"Overlay("],[-1,"FITUI"],[1,"this"],[0,".map, ra"]],"start1":34844,"start2":34844,"length1":21,"length2":20},{"diffs":[[0,"            "],[-1,"FITUI"],[1,"this"],[0,".showPolylin"]],"start1":34893,"start2":34893,"length1":29,"length2":28},{"diffs":[[0,"olyline("],[-1,"FITUI"],[1,"this"],[0,".map, ra"]],"start1":34915,"start2":34915,"length1":21,"length2":20},{"diffs":[[0,"            "],[-1,"FITUI"],[1,"this"],[0,".showChartsD"]],"start1":35031,"start2":35031,"length1":29,"length2":28},{"diffs":[[0,"        "],[-1,"FITUI"],[1,"this"],[0,".showDat"]],"start1":35241,"start2":35241,"length1":21,"length2":20},{"diffs":[[0,"                "],[-1,"FITUI"],[1,"this"],[0,".progressFITimpo"]],"start1":36570,"start2":36570,"length1":37,"length2":36},{"diffs":[[0,"      }\n\n\n\n    }"],[-1,""],[0,""],[1,";"],[0,"\n\n    UIControll"]],"start1":36903,"start2":36903,"length1":32,"length2":33},{"diffs":[[0,"String());\n    }"],[-1,""],[0,""],[1,";"],[0,"\n\n    function p"]],"start1":37039,"start2":37039,"length1":32,"length2":33},{"diffs":[[0,"g event\n        "],[-1,"FITUI"],[1,"this"],[0,".inpFITFile = do"]],"start1":40901,"start2":40901,"length1":37,"length2":36},{"diffs":[[0,"        "],[-1,"FITUI"],[1,"this"],[0,".inpFITF"]],"start1":40974,"start2":40974,"length1":21,"length2":20},{"diffs":[[0,"r('change', "],[-1,"FITUI"],[1,"this"],[0,".onFitFileSe"]],"start1":41013,"start2":41013,"length1":29,"length2":28},{"diffs":[[0,");\n\n        "],[-1,"FITUI"],[1,"this"],[0,".divMsgMap ="]],"start1":41350,"start2":41350,"length1":29,"length2":28},{"diffs":[[0,"Map');\n\n        "],[-1,"FITUI"],[1,"this"],[0,".progressFITImpo"]],"start1":41410,"start2":41410,"length1":37,"length2":36},{"diffs":[[0,"        "],[-1,"FITUI"],[1,"this"],[0,".divSess"]],"start1":41498,"start2":41498,"length1":21,"length2":20},{"diffs":[[0,"        \n\n\n    }"],[-1,""],[0,""],[1,";"],[0,"\n\n    UIControll"]],"start1":41648,"start2":41648,"length1":32,"length2":33},{"diffs":[[0,"Records) {\n\n"],[1,"var self = this;\n"],[0,"        var "]],"start1":41731,"start2":41731,"length1":24,"length2":41},{"diffs":[[0," while ("],[1,"this."],[0,"divMsgMa"]],"start1":42126,"start2":42126,"length1":16,"length2":21},{"diffs":[[0,") {\n            "],[1,"this."],[0,"divMsgMap.remove"]],"start1":42159,"start2":42159,"length1":32,"length2":37},{"diffs":[[0,"veChild("],[1,"this."],[0,"divMsgMa"]],"start1":42194,"start2":42194,"length1":16,"length2":21},{"diffs":[[0,"        "],[1,"self."],[0,"divMsgMa"]],"start1":43190,"start2":43190,"length1":16,"length2":21},{"diffs":[[0,"      })"],[1,";"],[0,"\n    }"],[1,";"],[0,"\n\n    //"]],"start1":43288,"start2":43288,"length1":22,"length2":24},{"diffs":[[0,"        "],[-1,"FITUI"],[1,"this"],[0,".selecte"]],"start1":44976,"start2":44976,"length1":21,"length2":20},{"diffs":[[0,"files = "],[-1,"FITUI"],[1,"this"],[0,".selecte"]],"start1":45034,"start2":45034,"length1":21,"length2":20},{"diffs":[[0,"lse);\n\n        }"],[-1,";"],[0,""],[1,""],[0,"\n\n        // Mak"]],"start1":45557,"start2":45557,"length1":33,"length2":32},{"diffs":[[0,"    if ("],[-1,"FITUI[\""],[1,"this."],[0,"fitFileM"]],"start1":45629,"start2":45629,"length1":23,"length2":21},{"diffs":[[0,"eManager"],[-1,"\"]"],[0," !== und"]],"start1":45648,"start2":45648,"length1":18,"length2":16},{"diffs":[[0,") {\n            "],[-1,"FITUI[\""],[1,"this."],[0,"fitFileManager\"]"]],"start1":45670,"start2":45670,"length1":39,"length2":37},{"diffs":[[0,"s.fitFileManager"],[-1,"\"]"],[0,".removeEventList"]],"start1":45689,"start2":45689,"length1":34,"length2":32},{"diffs":[[0,"stener('error', "],[-1,"FITUI"],[1,"this"],[0,".onFITManagerErr"]],"start1":45719,"start2":45719,"length1":37,"length2":36},{"diffs":[[0,"e);\n            "],[-1,"FITUI[\""],[1,"this."],[0,"fitFileManager\"]"]],"start1":45763,"start2":45763,"length1":39,"length2":37},{"diffs":[[0,"eManager"],[-1,"\"]"],[0,".removeE"]],"start1":45790,"start2":45790,"length1":18,"length2":16},{"diffs":[[0,"ener('message', "],[-1,"FITUI"],[1,"this"],[0,".onFITManagerMsg"]],"start1":45814,"start2":45814,"length1":37,"length2":36},{"diffs":[[0,"e);\n            "],[-1,"FITUI[\""],[1,"this."],[0,"fitFileManager\"]"]],"start1":45856,"start2":45856,"length1":39,"length2":37},{"diffs":[[0,"eManager"],[-1,"\"]"],[0,".termina"]],"start1":45883,"start2":45883,"length1":18,"length2":16},{"diffs":[[0,"     }\n\n        "],[-1,"FITUI[\""],[1,"this."],[0,"fitFileManager\"]"]],"start1":45908,"start2":45908,"length1":39,"length2":37},{"diffs":[[0,"eManager"],[-1,"\"]"],[0," = new W"]],"start1":45935,"start2":45935,"length1":18,"length2":16},{"diffs":[[0,"TImport.js\")"],[1,";"],[0,"\n        FIT"]],"start1":45968,"start2":45968,"length1":24,"length2":25},{"diffs":[[0,"t.js\");\n        "],[-1,"FITUI[\""],[1,"this."],[0,"fitFileManager\"]"]],"start1":45974,"start2":45974,"length1":39,"length2":37},{"diffs":[[0,"s.fitFileManager"],[-1,"\"]"],[0,".addEventListene"]],"start1":45993,"start2":45993,"length1":34,"length2":32},{"diffs":[[0,"ener('message', "],[-1,"FITUI"],[1,"this"],[0,".onFITManagerMsg"]],"start1":46022,"start2":46022,"length1":37,"length2":36},{"diffs":[[0,"false);\n        "],[-1,"FITUI[\""],[1,"this."],[0,"fitFileManager\"]"]],"start1":46060,"start2":46060,"length1":39,"length2":37},{"diffs":[[0,"eManager"],[-1,"\"]"],[0,".addEven"]],"start1":46087,"start2":46087,"length1":18,"length2":16},{"diffs":[[0,"stener('error', "],[-1,"FITUI"],[1,"this"],[0,".onFITManagerErr"]],"start1":46106,"start2":46106,"length1":37,"length2":36},{"diffs":[[0,"    if ("],[-1,"FITUI"],[1,"this"],[0,".progres"]],"start1":47391,"start2":47391,"length1":21,"length2":20},{"diffs":[[0,"ed)\n            "],[-1,"FITUI"],[1,"this"],[0,".progressFITimpo"]],"start1":47442,"start2":47442,"length1":37,"length2":36},{"diffs":[[0,"        "],[-1,"FITUI"],[1,"this"],[0,".progres"]],"start1":47499,"start2":47499,"length1":21,"length2":20},{"diffs":[[0,"indings("],[-1,"FITUI"],[1,"this"],[0,".progres"]],"start1":47592,"start2":47592,"length1":21,"length2":20},{"diffs":[[0,"        "],[-1,"FITUI[\""],[1,"this."],[0,"fitFileM"]],"start1":47721,"start2":47721,"length1":23,"length2":21},{"diffs":[[0,"eManager"],[-1,"\"]"],[0,".postMes"]],"start1":47740,"start2":47740,"length1":18,"length2":16},{"diffs":[[0,"g);\n\n\n\n    }"],[1,";"],[0,"\n\n\n    funct"]],"start1":47763,"start2":47763,"length1":24,"length2":25}]],"length":48751,"saved":false}
{"ts":1359727983203,"patch":[[{"diffs":[[0,"                "],[-1,"this"],[1,"FITUI"],[0,".progressFITimpo"]],"start1":27853,"start2":27853,"length1":36,"length2":37},{"diffs":[[0,"            if ("],[-1,"this"],[1,"FITUI"],[0,".sessionViewMode"]],"start1":32439,"start2":32439,"length1":36,"length2":37},{"diffs":[[0,"                "],[-1,"this"],[1,"FITUI"],[0,".sessionViewMode"]],"start1":32746,"start2":32746,"length1":36,"length2":37},{"diffs":[[0,"                "],[-1,"this"],[1,"FITUI"],[0,".sessionViewMode"]],"start1":32848,"start2":32848,"length1":36,"length2":37},{"diffs":[[0,"indings("],[-1,"this"],[1,"FITUI"],[0,".session"]],"start1":33017,"start2":33017,"length1":20,"length2":21},{"diffs":[[0,"ewModel("],[-1,"this"],[1,"FITUI"],[0,".session"]],"start1":33323,"start2":33323,"length1":20,"length2":21},{"diffs":[[0,"ptions, "],[-1,"this"],[1,"FITUI"],[0,".session"]],"start1":33420,"start2":33420,"length1":20,"length2":21},{"diffs":[[0,"    if ("],[-1,"this"],[1,"FITUI"],[0,".lapView"]],"start1":33639,"start2":33639,"length1":20,"length2":21},{"diffs":[[0,"        "],[-1,"this"],[1,"FITUI"],[0,".lapView"]],"start1":33752,"start2":33752,"length1":20,"length2":21},{"diffs":[[0,"indings("],[-1,"this"],[1,"FITUI"],[0,".lapView"]],"start1":33910,"start2":33910,"length1":20,"length2":21},{"diffs":[[0,"ewModel("],[-1,"this"],[1,"FITUI"],[0,".lapView"]],"start1":34062,"start2":34062,"length1":20,"length2":21},{"diffs":[[0,"ptions, "],[-1,"this"],[1,"FITUI"],[0,".lapView"]],"start1":34150,"start2":34150,"length1":20,"length2":21},{"diffs":[[0,"    if ("],[-1,"this"],[1,"FITUI"],[0,".map ==="]],"start1":34244,"start2":34244,"length1":20,"length2":21},{"diffs":[[0,"    "],[-1,"    this"],[1,"FITUI"],[0,".map = "],[-1,"this"],[1,"FITUI"],[0,".ini"]],"start1":34289,"start2":34289,"length1":27,"length2":25},{"diffs":[[0,"            "],[-1,"    this"],[1,"FITUI"],[0,".showLaps(ra"]],"start1":34433,"start2":34433,"length1":32,"length2":29},{"diffs":[[0,"            "],[-1,"    this"],[1,"FITUI"],[0,".showSession"]],"start1":34543,"start2":34543,"length1":32,"length2":29},{"diffs":[[0,"Markers("],[-1,"this"],[1,"FITUI"],[0,".map, ra"]],"start1":34572,"start2":34572,"length1":20,"length2":21},{"diffs":[[0,"            "],[-1,"this"],[1,"FITUI"],[0,".showSession"]],"start1":34819,"start2":34819,"length1":28,"length2":29},{"diffs":[[0,"Overlay("],[-1,"this"],[1,"FITUI"],[0,".map, ra"]],"start1":34851,"start2":34851,"length1":20,"length2":21},{"diffs":[[0,"            "],[-1,"this"],[1,"FITUI"],[0,".showPolylin"]],"start1":34901,"start2":34901,"length1":28,"length2":29},{"diffs":[[0,"olyline("],[-1,"this"],[1,"FITUI"],[0,".map, ra"]],"start1":34924,"start2":34924,"length1":20,"length2":21},{"diffs":[[0,"            "],[-1,"this"],[1,"FITUI"],[0,".showChartsD"]],"start1":35041,"start2":35041,"length1":28,"length2":29},{"diffs":[[0,"        "],[-1,"this"],[1,"FITUI"],[0,".showDat"]],"start1":35252,"start2":35252,"length1":20,"length2":21},{"diffs":[[0,"            "],[-1,"    this"],[1,"FITUI"],[0,".progressFIT"]],"start1":36582,"start2":36582,"length1":32,"length2":29},{"diffs":[[0,"    if ("],[-1,"this"],[1,"FITUI"],[0,".fitFile"]],"start1":45638,"start2":45638,"length1":20,"length2":21},{"diffs":[[0,") {\n            "],[-1,"this"],[1,"FITUI"],[0,".fitFileManager."]],"start1":45680,"start2":45680,"length1":36,"length2":37},{"diffs":[[0,"stener('error', "],[-1,"this"],[1,"FITUI"],[0,".onFITManagerErr"]],"start1":45730,"start2":45730,"length1":36,"length2":37},{"diffs":[[0,"e);\n            "],[-1,"this"],[1,"FITUI"],[0,".fitFileManager."]],"start1":45775,"start2":45775,"length1":36,"length2":37},{"diffs":[[0,"ener('message', "],[-1,"this"],[1,"FITUI"],[0,".onFITManagerMsg"]],"start1":45827,"start2":45827,"length1":36,"length2":37},{"diffs":[[0,"e);\n            "],[-1,"this"],[1,"FITUI"],[0,".fitFileManager."]],"start1":45870,"start2":45870,"length1":36,"length2":37},{"diffs":[[0,"     }\n\n        "],[-1,"this"],[1,"FITUI"],[0,".fitFileManager "]],"start1":45923,"start2":45923,"length1":36,"length2":37},{"diffs":[[0,"t.js\");\n        "],[-1,"this"],[1,"FITUI"],[0,".fitFileManager."]],"start1":45990,"start2":45990,"length1":36,"length2":37},{"diffs":[[0,"('message', "],[-1,"this"],[1,"FITUI"],[0,".onFITManage"]],"start1":46043,"start2":46043,"length1":28,"length2":29},{"diffs":[[0,"false);\n        "],[-1,"this"],[1,"FITUI"],[0,".fitFileManager."]],"start1":46078,"start2":46078,"length1":36,"length2":37},{"diffs":[[0,"error', "],[-1,"this"],[1,"FITUI"],[0,".onFITMa"]],"start1":46133,"start2":46133,"length1":20,"length2":21},{"diffs":[[0,"    if ("],[-1,"this"],[1,"FITUI"],[0,".progres"]],"start1":47411,"start2":47411,"length1":20,"length2":21},{"diffs":[[0,"d)\n         "],[-1,"   this"],[1,"FITUI"],[0,".progressFIT"]],"start1":47464,"start2":47464,"length1":31,"length2":29},{"diffs":[[0," null;\n\n        "],[-1,"this"],[1,"FITUI"],[0,".progressFITimpo"]],"start1":47510,"start2":47510,"length1":36,"length2":37},{"diffs":[[0,"        "],[-1,"this"],[1,"FITUI"],[0,".fitFile"]],"start1":47741,"start2":47741,"length1":20,"length2":21}]],"length":48772,"saved":false}
{"ts":1359728149225,"patch":[[{"diffs":[[0,"        "],[-1,"this"],[1,"FITUI"],[0,".selecte"]],"start1":44985,"start2":44985,"length1":20,"length2":21},{"diffs":[[0,"files = "],[-1,"this"],[1,"FITUI"],[0,".selecte"]],"start1":45044,"start2":45044,"length1":20,"length2":21}]],"length":48774,"saved":false}
{"ts":1359728353212,"patch":[[{"diffs":[[0,"indings("],[-1,"this"],[1,"FITUI"],[0,".progres"]],"start1":47614,"start2":47614,"length1":20,"length2":21}]],"length":48775,"saved":false}
